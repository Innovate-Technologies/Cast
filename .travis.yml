language: node_js
node_js:
- '10'

matrix:
  include:
    - os: linux
      sudo: required
      node_js: '10'
      env: TYPE=docker ARCH=amd64 ARCHREPO=amd64 QEMU_ARCH=x86_64
    - os: linux
      sudo: required
      node_js: '10'
      env: TYPE=docker ARCH=armhf ARCHREPO=arm32v7 QEMU_ARCH=arm
    - os: linux
      sudo: required
      node_js: '10'
      env: TYPE=docker ARCH=arm64 ARCHREPO=arm64v8 QEMU_ARCH=aarch64
    - os: linux
      sudo: required
      node_js: '10'
      env: TYPE=binary
    - os: osx
      node_js: '10'
      env: TYPE=binary

env:
    global:
      - CXX=g++-4.8
      - QEMU_VER=v2.9.1
      - DOCKER_REPO=innovate/cast

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
cache:
  directories:
  - /tmp/nodec/

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo add-apt-repository ppa:deadsnakes/ppa; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get update; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get -y install docker-ce python2.7; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get -y install qemu qemu-user-static qemu-user binfmt-support; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then docker run --rm --privileged multiarch/qemu-user-static:register; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install python squashfs wget; fi
os:
- linux
script:
- npm test
- npm -g install babel-cli
- babel ./ -d /tmp/testbuild --minified --ignore 'node_modules/'
- git reset --hard
- rm -fr node_modules/
- if [ "$TYPE" == "docker" ]; then wget -N https://github.com/multiarch/qemu-user-static/releases/download/$QEMU_VER/x86_64_qemu-${QEMU_ARCH}-static.tar.gz ; fi
- if [ "$TYPE" == "docker" ]; then tar -xvf x86_64_qemu-${QEMU_ARCH}-static.tar.gz; fi
- if [ "$TYPE" == "docker" ]; then docker build -t $DOCKER_REPO:$ARCH-$TRAVIS_COMMIT --build-arg ARCHREPO="$ARCHREPO" --build-arg QEMU_ARCH="$QEMU_ARCH" ./; fi

 
- if [ "$TYPE" == "binary" ] && [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install -y squashfs-tools; fi
- if [ "$TYPE" == "binary" ]; then sudo pip install awscli --upgrade; fi 
- if [ "$TYPE" == "binary" ] && [[ "$TRAVIS_OS_NAME" == "linux" ]]; then wget http://enclose.io/nodec/nodec-linux-x64.gz; fi
- if [ "$TYPE" == "binary" ] && [[ "$TRAVIS_OS_NAME" == "linux" ]]; then gzip -d nodec-linux-x64.gz; fi
- if [ "$TYPE" == "binary" ] && [[ "$TRAVIS_OS_NAME" == "linux" ]]; then mv nodec-linux-x64 nodec && chmod +x nodec; fi
- if [ "$TYPE" == "binary" ] && [[ "$TRAVIS_OS_NAME" == "osx" ]]; then wget http://enclose.io/nodec/nodec-darwin-x64.gz fi
- if [ "$TYPE" == "binary" ] && [[ "$TRAVIS_OS_NAME" == "osx" ]]; then gzip -d nodec-darwin-x64.gz; fi
- if [ "$TYPE" == "binary" ] && [[ "$TRAVIS_OS_NAME" == "osx" ]]; then mv nodec-darwin-x64 nodec && chmod +x nodec; fi
- if [ "$TYPE" == "binary" ]; then ./nodec server.js; fi
- if [ "$TYPE" == "binary" ]; then mv a.out cast-$TRAVIS_OS_NAME-$TRAVIS_COMMIT; fi


after_success:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin 
  - if [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ "$TYPE" == "docker" ]; then docker push $DOCKER_REPO:$ARCH-$TRAVIS_COMMIT ; fi
  - if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ "$TYPE" == "docker" ]; then docker tag $DOCKER_REPO:$ARCH-$TRAVIS_COMMIT $DOCKER_REPO:$ARCH-master; docker push $DOCKER_REPO:$ARCH-master ; fi
  - if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ "$TYPE" == "docker" ]; then docker tag $DOCKER_REPO:$ARCH-$TRAVIS_COMMIT $DOCKER_REPO:$ARCH-master; docker push $DOCKER_REPO:$ARCH-master ; fi
  - if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ "$TRAVIS_TAG" != "" ] && [ "$TYPE" == "docker" ]; then docker tag $DOCKER_REPO:$ARCH-$TRAVIS_COMMIT $DOCKER_REPO:$ARCH-$TRAVIS_TAG; docker push $DOCKER_REPO:$ARCH-$TRAVIS_TAG ; fi
  - if [ "$TYPE" == "binary" ]; then aws s3 --endpoint-url=$S3_ENDPOINT cp ./cast-$TRAVIS_OS_NAME-$TRAVIS_COMMIT s3://cast/; fi
